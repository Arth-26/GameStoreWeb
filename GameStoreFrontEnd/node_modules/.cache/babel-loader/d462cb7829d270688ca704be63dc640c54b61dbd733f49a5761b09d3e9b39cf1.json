{"ast":null,"code":"export default {\n  name: 'GameItem',\n  data() {\n    return {\n      result: [],\n      game: {\n        id: '',\n        nome: '',\n        preco: '',\n        data_de_lancamento: '',\n        categoria: ''\n      }\n    };\n  },\n  mounted() {\n    this.getGameList();\n  },\n  methods: {\n    async getGameList() {\n      try {\n        const response = await fetch('http://localhost:8080/games');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const responseData = await response.json();\n        const gameList = responseData.content;\n        this.result = data.games;\n        this.originalList = data.games.map(p => ({\n          ...p\n        }));\n      } catch (error) {\n        alert('Error loading games!');\n        console.error(error);\n      }\n    },\n    async deleteGame(game) {\n      const confirmed = confirm('Are you sure you want to delete this product?');\n      if (confirmed) {\n        try {\n          const response = await fetch(`http://localhost:8080/games/delete/${game.id}`, {\n            method: 'DELETE'\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          alert('Game deleted successfully!');\n          this.getGameList();\n        } catch (error) {\n          alert('Error deleting game!');\n          console.error(error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","result","game","id","nome","preco","data_de_lancamento","categoria","mounted","getGameList","methods","response","fetch","ok","Error","status","responseData","json","gameList","content","games","originalList","map","p","error","alert","console","deleteGame","confirmed","confirm","method"],"sources":["C:\\Users\\Arthur\\gamestore\\src\\components\\GameList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        \r\n      <table class=\"table table-dark\">\r\n        <thead>\r\n          <tr>  \r\n            <th scope=\"col\">Nome</th>\r\n            <th scope=\"col\">Preço</th>\r\n            <th scope=\"col\">Data De Lançamento</th>\r\n            <th scope=\"col\">Category</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"game in result\" v-bind:key=\"game.id\">\r\n            \r\n            <td>{{ game.id }}</td>\r\n            <td>{{ game.nome }}</td>\r\n            <td>{{ game.preco }}</td>\r\n            <td>{{ game.categoria }}</td>\r\n            <td>{{ game.data_de_lancamento}}</td>\r\n            \r\n            \r\n            <td>\r\n              \r\n              <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteGame(game)\">Delete</button>\r\n            </td>\r\n          </tr>\r\n  \r\n        </tbody>\r\n      </table>\r\n  \r\n    </div>\r\n  </template>\r\n\r\n\r\n<script>\r\n\r\n\r\nexport default {\r\n  name: 'GameItem',\r\n  data () {\r\n    return {\r\n      result: [],\r\n\r\n      game: {\r\n        \r\n        id: '',\r\n        nome: '',\r\n        preco: '',\r\n        data_de_lancamento: '',\r\n        categoria: ''\r\n\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getGameList()\r\n  },\r\n  methods: {\r\n    async getGameList () {\r\n        try {\r\n        const response = await fetch('http://localhost:8080/games');\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        const gameList = responseData.content\r\n        this.result = data.games;\r\n        this.originalList = data.games.map(p => ({ ...p }));\r\n      } catch (error) {\r\n        alert('Error loading games!');\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteGame (game) {\r\n      const confirmed = confirm('Are you sure you want to delete this product?')\r\n      if (confirmed) {\r\n        try {\r\n          const response = await fetch(`http://localhost:8080/games/delete/${game.id}`, {\r\n            method: 'DELETE',\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n\r\n          alert('Game deleted successfully!');\r\n          this.getGameList();\r\n        } catch (error) {\r\n          alert('Error deleting game!');\r\n          console.error(error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n</script>"],"mappings":"AAsCA,eAAe;EACbA,IAAI,EAAE,UAAU;EAChBC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,MAAM,EAAE,EAAE;MAEVC,IAAI,EAAE;QAEJC,EAAE,EAAE,EAAE;QACNC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,kBAAkB,EAAE,EAAE;QACtBC,SAAS,EAAE;MAEb;IACF;EACF,CAAC;EACDC,OAAMA,CAAA,EAAK;IACT,IAAI,CAACC,WAAW,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAUA,CAAA,EAAK;MACjB,IAAI;QACJ,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,6BAA6B,CAAC;QAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;QAC3D;QAEA,MAAMC,YAAW,GAAI,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAC1C,MAAMC,QAAO,GAAIF,YAAY,CAACG,OAAM;QACpC,IAAI,CAAClB,MAAK,GAAID,IAAI,CAACoB,KAAK;QACxB,IAAI,CAACC,YAAW,GAAIrB,IAAI,CAACoB,KAAK,CAACE,GAAG,CAACC,CAAA,KAAM;UAAE,GAAGA;QAAE,CAAC,CAAC,CAAC;MACrD,EAAE,OAAOC,KAAK,EAAE;QACdC,KAAK,CAAC,sBAAsB,CAAC;QAC7BC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAMG,UAASA,CAAGzB,IAAI,EAAE;MACtB,MAAM0B,SAAQ,GAAIC,OAAO,CAAC,+CAA+C;MACzE,IAAID,SAAS,EAAE;QACb,IAAI;UACF,MAAMjB,QAAO,GAAI,MAAMC,KAAK,CAAE,sCAAqCV,IAAI,CAACC,EAAG,EAAC,EAAE;YAC5E2B,MAAM,EAAE;UACV,CAAC,CAAC;UAEF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;UAC3D;UAEAU,KAAK,CAAC,4BAA4B,CAAC;UACnC,IAAI,CAAChB,WAAW,CAAC,CAAC;QACpB,EAAE,OAAOe,KAAK,EAAE;UACdC,KAAK,CAAC,sBAAsB,CAAC;UAC7BC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;QACtB;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}