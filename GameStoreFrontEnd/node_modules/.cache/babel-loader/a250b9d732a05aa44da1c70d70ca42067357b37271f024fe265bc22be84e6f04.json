{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport router from '../router';\nexport default {\n  name: 'GameDetail',\n  data() {\n    return {\n      baseUrl: 'http://localhost:8080',\n      result: [],\n      originalList: [],\n      game: {\n        id: '',\n        nome: '',\n        preco: '',\n        data_de_lancamento: '',\n        categoria: '',\n        description: ''\n      }\n    };\n  },\n  mounted() {\n    // Extrai o id do parâmetro da URL usando a biblioteca `vue-router`\n    const gameId = this.$route.params.id;\n    if (gameId) {\n      this.getGame(gameId);\n    }\n  },\n  methods: {\n    cloneGame(game) {\n      return JSON.parse(JSON.stringify(game));\n    },\n    async getGameList() {\n      try {\n        const response = await fetch('http://localhost:8080/games');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        this.result = data;\n        this.originalList = data.map(p => ({\n          ...p\n        }));\n      } catch (error) {\n        alert('Error loading games!');\n        console.error(error);\n      }\n    },\n    updateGame() {\n      const oldGame = this.originalList.find(p => p.id === this.id);\n      const formData = new FormData();\n      const updatedFields = {};\n      if (this.nome !== oldGame.nome) {\n        formData.append('nome', this.nome);\n        updatedFields.nome = this.nome;\n      }\n      if (this.game.categoria !== oldGame.categoria) {\n        formData.append('categoria', this.game.categoria);\n        updatedFields.categoria = this.game.categoria;\n      }\n      if (this.game.preco !== oldGame.preco) {\n        formData.append('preco', this.game.preco);\n        updatedFields.preco = parseFloat(this.game.preco);\n      }\n      if (this.game.data_de_lancamento !== oldGame.data_de_lancamento) {\n        formData.append('data_de_lancamento', this.game.data_de_lancamento);\n        updatedFields.data_de_lancamento = this.game.categoria;\n      }\n      if (this.game.description !== oldGame.description) {\n        formData.append('description', this.game.description);\n        updatedFields.description = this.game.description;\n      }\n      const index = this.result.findIndex(game => game.id === this.game.id);\n      if (index !== -1) {\n        const updatedgame = {\n          ...this.result[index]\n        };\n        updatedgame.nome = updatedFields.nome || updatedgame.nome;\n        updatedgame.categoria = updatedFields.categoria || updatedgame.categoria;\n        updatedgame.preco = updatedFields.preco || updatedgame.preco;\n        updatedgame.data_de_lancamento = updatedFields.data_de_lancamento || updatedgame.data_de_lancamento;\n        updatedgame.description = updatedFields.description || updatedgame.description;\n        this.result.splice(index, 1, updatedgame);\n      }\n      fetch(`http://localhost:8080/games/${oldGame.id}`, {\n        method: 'PATCH',\n        body: formData\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(() => {\n        alert('Game updated successfully!');\n        const index = this.result.findIndex(p => p.id === this.game.id);\n        if (index !== -1) {\n          const updatedGame = {\n            ...this.result[index],\n            ...updatedFields\n          };\n          this.$set(this.result, index, updatedGame);\n        }\n        router.push('/games');\n      }).catch(error => {\n        alert('Error updating game!');\n        console.log(error);\n      });\n    },\n    getGame(gameId) {\n      fetch(`http://localhost:8080/games/${gameId}`).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        this.game = {\n          id: data.id,\n          nome: data.nome,\n          categoria: data.categoria,\n          preco: data.preco,\n          data_de_lancamento: data.data_de_lancamento,\n          description: data.description\n        };\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["router","name","data","baseUrl","result","originalList","game","id","nome","preco","data_de_lancamento","categoria","description","mounted","gameId","$route","params","getGame","methods","cloneGame","JSON","parse","stringify","getGameList","response","fetch","ok","Error","status","json","map","p","error","alert","console","updateGame","oldGame","find","formData","FormData","updatedFields","append","parseFloat","index","findIndex","updatedgame","splice","method","body","then","updatedGame","$set","push","catch","log"],"sources":["C:\\Users\\Arthur\\gamestore\\src\\components\\GameDetail.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <form @submit.prevent=\"updateGame\" class=\"m-5\">\r\n            <h2 class=\"mt-2\">Game Registration</h2>\r\n            <div class=\"form-group\">\r\n                <input id=\"nome\" type=\"text\" v-model=\"nome\" class=\"form-control\" placeholder=\"Game name\">\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <input id=\"categoria\" type=\"text\" v-model=\"categoria\" class=\"form-control\"\r\n                    placeholder=\"Game category\">\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <input id=\"preco\" type=\"number\" step=\".01\" v-model=\"preco\" class=\"form-control\" placeholder=\"0.0\">\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <input id=\"data_de_lancamento\" type=\"date\" v-model=\"data_de_lancamento\" class=\"form-control\"\r\n                    placeholder=\"Release Date\">\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <input id=\"description\" type=\"text\" v-model=\"description\" class=\"form-control\"\r\n                    placeholder=\"Game description\">\r\n            </div>\r\n            <div class=\"mt-3 mb-3\">\r\n                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport router from '../router'\r\n\r\nexport default {\r\n    name: 'GameDetail',\r\n    data() {\r\n        return {\r\n            baseUrl: 'http://localhost:8080',\r\n\r\n            result: [],\r\n            originalList: [],\r\n\r\n            game: { \r\n                id: '',\r\n                nome: '',\r\n                preco: '',\r\n                data_de_lancamento: '',\r\n                categoria: '',\r\n                description: '',\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        // Extrai o id do parâmetro da URL usando a biblioteca `vue-router`\r\n        const gameId = this.$route.params.id\r\n        if (gameId) {\r\n            this.getGame(gameId)\r\n        }\r\n    },\r\n    methods: {\r\n        cloneGame(game) {\r\n            return JSON.parse(JSON.stringify(game))\r\n        },\r\n        async getGameList() {\r\n            try {\r\n                const response = await fetch('http://localhost:8080/games');\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                this.result = data;\r\n                this.originalList = data.map(p => ({ ...p }));\r\n            } catch (error) {\r\n                alert('Error loading games!');\r\n                console.error(error);\r\n            }\r\n        },\r\n        updateGame() {\r\n            const oldGame = this.originalList.find(p => p.id === this.id)\r\n            const formData = new FormData()\r\n            const updatedFields = {}\r\n\r\n            if (this.nome !== oldGame.nome) {\r\n                formData.append('nome', this.nome)\r\n                updatedFields.nome = this.nome\r\n            }\r\n\r\n            if (this.game.categoria !== oldGame.categoria) {\r\n                formData.append('categoria', this.game.categoria)\r\n                updatedFields.categoria = this.game.categoria\r\n            }\r\n\r\n            if (this.game.preco !== oldGame.preco) {\r\n                formData.append('preco', this.game.preco)\r\n                updatedFields.preco = parseFloat(this.game.preco)\r\n            }\r\n\r\n            if (this.game.data_de_lancamento !== oldGame.data_de_lancamento) {\r\n                formData.append('data_de_lancamento', this.game.data_de_lancamento)\r\n                updatedFields.data_de_lancamento = this.game.categoria\r\n            }\r\n\r\n            if (this.game.description !== oldGame.description) {\r\n                formData.append('description', this.game.description)\r\n                updatedFields.description = this.game.description\r\n            }\r\n\r\n            const index = this.result.findIndex((game) => game.id === this.game.id)\r\n            if (index !== -1) {\r\n                const updatedgame = { ...this.result[index] }\r\n                updatedgame.nome = updatedFields.nome || updatedgame.nome\r\n                updatedgame.categoria = updatedFields.categoria || updatedgame.categoria\r\n                updatedgame.preco = updatedFields.preco || updatedgame.preco\r\n                updatedgame.data_de_lancamento = updatedFields.data_de_lancamento || updatedgame.data_de_lancamento\r\n                updatedgame.description = updatedFields.description || updatedgame.description\r\n\r\n                this.result.splice(index, 1, updatedgame)\r\n            }\r\n\r\n            fetch(`http://localhost:8080/games/${oldGame.id}`, {\r\n                method: 'PATCH',\r\n                body: formData,\r\n            })\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`HTTP error! Status: ${response.status}`);\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(() => {\r\n                    alert('Game updated successfully!');\r\n                    const index = this.result.findIndex(p => p.id === this.game.id);\r\n                    if (index !== -1) {\r\n                        const updatedGame = { ...this.result[index], ...updatedFields };\r\n                        this.$set(this.result, index, updatedGame);\r\n                    }\r\n                    router.push('/games');\r\n                })\r\n                .catch((error) => {\r\n                    alert('Error updating game!')\r\n                    console.log(error)\r\n                })\r\n        },\r\n        getGame(gameId) {\r\n            \r\n            fetch(`http://localhost:8080/games/${gameId}`)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`HTTP error! Status: ${response.status}`);\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    \r\n                    this.game= {\r\n                        id: data.id,\r\n                        nome: data.nome,\r\n                        categoria: data.categoria,\r\n                        preco: data.preco,\r\n                        data_de_lancamento: data.data_de_lancamento,\r\n                        description: data.description,\r\n                    };\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}